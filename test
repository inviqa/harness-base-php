#!/bin/bash

set -e
set -x

export path_test="./tmp-test"

function main()
{
    test "$1" "$2"
}

function test()
(
    local harness="$1"
    local mode="$2"

    setup "$harness" "$mode"
    setup_dynamic_mountpoint
    install_environment
    check_environment_started "$harness" "$mode"
    run_pipeline_tests
    restart_environment
    check_environment_started "$harness" "$mode"
    teardown

    if [[ "$mode" == "dynamic" ]]; then
      setup "$harness" "$mode"
      setup_dynamic_docker_sync
      install_environment
      check_environment_started "$harness" "$mode"
      run_pipeline_tests
      restart_environment
      check_environment_started "$harness" "$mode"
      teardown

      setup "$harness" "$mode"
      setup_dynamic_mutagen
      install_environment
      check_environment_started "$harness" "$mode"
      run_pipeline_tests
      restart_environment
      check_environment_started "$harness" "$mode"
      teardown
    fi
)

function setup()
(
    local harness="$1"
    local mode="$2"

    local path_harness="./dist/harness-${harness}"

    if [ -d "${path_test}" ]; then
        rm -rf "${path_test}"
    fi

    cp -ap "${path_harness}/.ci/sample-${mode}" "${path_test}"
    cp -ap "${path_harness}" "${path_test}/.my127ws"
)

function install_environment()
(
    cd "${path_test}"
    ws install
)

function check_environment_started()
(
    local harness="$1"
    local mode="$2"

    cd "${path_test}"

    if [ "$(docker-compose -p "ci-${harness}-sample-${mode}" ps | grep -c Exit)" -gt 0 ]; then
      echo 'Some containers failed to start'
      docker-compose -p "ci-${harness}-sample-${mode}" ps
      return 1
    fi
)

function run_pipeline_tests()
(
    cd "${path_test}"

    if [ -f composer.json ]; then
      ws exec composer test-quality
      ws exec composer test-unit
      ws exec composer test-acceptance
    fi

    ws helm kubeval qa
)

function restart_environment()
(
    cd "${path_test}"
    ws disable
    ws enable
)

function setup_dynamic_mountpoint()
(
    cd "${path_test}"
    echo "attribute('host.os'): linux" > workspace.override.yml
)

function setup_dynamic_docker_sync()
(
    cd "${path_test}"
    echo "attribute('host.os'): darwin" > workspace.override.yml
)

function setup_dynamic_mutagen()
(
    cd "${path_test}"
    echo "attribute('host.os'): darwin" > workspace.override.yml
    ws switch mutagen
)

function teardown()
(
    cd "${path_test}"
    ws destroy
    rm -rf .my127ws
)

function clean()
{
    if [ -d "$path_test" ]; then
        (cd "$path_test" && ws destroy)
        rm -rf "$path_test"
    fi
}

trap 'clean' EXIT
main "$@"
