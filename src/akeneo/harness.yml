---
harness('inviqa/akeneo'):
  description: A docker based development environment for akeneo 4.x
  require:
    services:
      - proxy
      - mail
    confd:
      - harness:/
    attributes:
      standard:
        - akeneo.edition
        - akeneo.enterprise.distribution.project_name
        - ssh.key.public
      secret_file:
        - ssh.key.private
---
attributes:
  app:
    web_owner: www-data
    web_group: www-data
    web_writable_dirs:
      - = @('app.uploads_directory')
      - /app/var/cache
      - /app/var/logs
    services:
      - chrome
      - elasticsearch
      - mysql
      - job-queue-consumer
      - cron
    file_storage_directory: /app/var/file_storage
    uploads_directory: /app/var/uploads
    web_directory: /app/public
    src_resources_directory: /app/src/Resources
    vendor_directory: /app/vendor
  akeneo:
    major_version: 5
    secret: AMjnA6QnWfkZ9s8vB2XXLALXuxZm7fmC
    edition: ~
    enterprise:
      distribution:
        project_name: ~
  php:
    version: "= (version_compare(@('akeneo.major_version'), '5', '>=')) ? 7.4 : 7.3"
    ini:
      apc.enable_cli: On
    composer:
      major_version: "= (version_compare(@('akeneo.major_version'), '5', '>=')) ? 2 : 1"
  database:
    user: akeneo
    pass: akeneo
    name: akeneo
    platform_version: 8.0
    import:
      steps:
        - passthru echo 'Importing database file'
        - run "set -e -o pipefail; pv --force \"$1\" | zcat | mysql -h \"$DB_HOST\" -u \"$DB_ADMIN_USER\" -p\"$DB_ADMIN_PASS\" \"$DB_NAME\""
        - passthru bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
        - passthru echo 'Reindexing Elasticsearch'
        - task http:wait "${ELASTICSEARCH_URL:-${ELASTICSEARCH_SCHEME:-http}://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}}" ${ELASTICSEARCH_USERNAME:+--user "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"}
        - run bin/console akeneo:elasticsearch:reset-indexes -n
        - run bin/console pim:product:index --all
        - run bin/console pim:product-model:index --all
        - passthru echo 'Clearing cache'
        - run bin/console c:c
        - passthru echo 'Done'
  backend:
    build:
      steps:
        - |
          if grep -q akeneo/pim-enterprise-dev composer.json; then
            run "ssh-keyscan github.com >> ~/.ssh/known_hosts"
            run "ssh-keyscan -p 443 distribution.akeneo.com >> ~/.ssh/known_hosts"
            run "chmod 0600 /home/build/.ssh/id_*"
          fi
        - task composer:install
    install:
      steps:
        - task http:wait "${ELASTICSEARCH_URL:-${ELASTICSEARCH_SCHEME:-http}://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}}" ${ELASTICSEARCH_USERNAME:+--user "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"}
        - = 'passthru bin/console pim:installer:db --catalog vendor/akeneo/pim-' ~ @('akeneo.edition') ~ '-dev/src/Akeneo/Platform/Bundle/InstallerBundle/Resources/fixtures/minimal'
        - task overlay:apply
        - task assets:dump
    init:
      steps:
        - passthru bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
        - task http:wait "${ELASTICSEARCH_URL:-${ELASTICSEARCH_SCHEME:-http}://${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}}" ${ELASTICSEARCH_USERNAME:+--user "${ELASTICSEARCH_USERNAME}:${ELASTICSEARCH_PASSWORD}"}
        - run bin/console akeneo:elasticsearch:reset-indexes --no-interaction
        - run bin/console pim:product:index --all
        - run bin/console pim:product-model:index --all
    migrate:
      steps:
        - passthru bin/console doctrine:migrations:migrate --no-interaction --allow-no-migration
    cron:
      jobs:
        - 15 12,20 * * * /cron-run-with-env.sh /app/bin/console akeneo:rule:run --env=prod
        - 30 16,23 * * * /cron-run-with-env.sh /app/bin/console pim:versioning:refresh --env=prod
        - 20 0 1 * * /cron-run-with-env.sh /app/bin/console akeneo:batch:purge-job-execution --env=prod
        - 20 0 * * * /cron-run-with-env.sh /app/bin/console pimee:project:notify-before-due-date --env=prod
        - 1 0 * * * /cron-run-with-env.sh /app/bin/console akeneo:connectivity-audit:update-data --env=prod
        - 0 2 * * * /cron-run-with-env.sh /app/bin/console pimee:project:recalculate --env=prod
        - 0 23 * * * /cron-run-with-env.sh /app/bin/console akeneo:reference-entity:refresh-records --all --env=prod
        - 4 22 * * * /cron-run-with-env.sh /app/bin/console pimee:sso:rotate-log 10 --env=prod
        - 0 23 * * * /cron-run-with-env.sh /app/bin/console pim:volume:aggregate --env=prod
        - "= (version_compare(@('akeneo.major_version'), '5', '>=')) ? '15 0 * * * /cron-run-with-env.sh /app/bin/console pim:data-quality-insights:schedule-periodic-tasks --env=prod' : '15 0 * * * /cron-run-with-env.sh /app/bin/console pimee:data-quality-insights:schedule-periodic-tasks --env=prod'"
        - "= (version_compare(@('akeneo.major_version'), '5', '>=')) ? '*/30 * * * * /cron-run-with-env.sh /app/bin/console pim:data-quality-insights:evaluations --env=prod' : '*/30 * * * * /cron-run-with-env.sh /app/bin/console pimee:data-quality-insights:evaluate-products --env=prod'"
        - 0 4 * * * /cron-run-with-env.sh /app/bin/console pim:versioning:purge --more-than-days 90 --no-interaction --force --env=prod
        - 0 2 * * * /cron-run-with-env.sh /app/bin/console pim:completeness:calculate --env=prod
  frontend:
    path: /app
    build:
      when: -f "package.json"
      steps:
        - run yarn install --frozen-lockfile
        - run bin/console cache:warmup
        - run bin/console pim:installer:assets --symlink --clean
        - run yarn run less
        - "= (version_compare(@('akeneo.major_version'), '5', '>=')) ? 'NO_DOCKER=1 run make dsm' : ''"
        - |
          if [ "$APP_BUILD" == "static" ]; then
            run yarn run webpack
            if [ "$(jq ".scripts.\"update-extensions\" != null" < package.json)" != "false" ]; then
              run yarn update-extensions
            fi
            run rm -rf node_modules/
            run yarn cache clean
          else
            run yarn run webpack-dev
            if [ "$(jq ".scripts.\"update-extensions\" != null" < package.json)" != "false" ]; then
              run yarn update-extensions
            fi
          fi
  docker:
    image:
      console: = 'my127/akeneo:' ~ @('php.version') ~ '-fpm-buster-console'
      php-fpm: = 'my127/akeneo:' ~ @('php.version') ~ '-fpm-buster'
  elasticsearch:
    image: elasticsearch
    tag: 7.10.1
  mysql:
    tag: 8.0
  nginx:
    # used to limit what is copied into an Nginx static-built image
    # vendor directory needed for vendor/*/*/*/public/ resources (images etc.)
    copy_directories:
     - = @('app.web_directory')
     - = @('app.vendor_directory')
  persistence:
    enabled: false
    akeneo:
      file_storage:
        claimName: akeneo-file-storage-pvc
        mountPath: = @('app.file_storage_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 1Gi
      uploads:
        claimName: akeneo-uploads-pvc
        mountPath: = @('app.uploads_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 1Gi
---
import:
  - harness/config/*.yml
  - harness/attributes/*.yml
  - harness/attributes/environment/={env('MY127WS_ENV','local')}.yml
