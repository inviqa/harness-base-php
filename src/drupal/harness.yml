---
harness('inviqa/drupal8'):
  description: A docker based development environment for drupal8
  require:
    services:
      - proxy
      - mail
    confd:
      - harness:/
---
attributes:
  app:
    web_owner: www-data
    web_group: www-data
    web_writable_dirs:
      - '/app/docroot/sites/default/files'
    services:
      - chrome
      - mysql
      - redis
    web_directory: = '/app/' ~ @('drupal.docroot')
    files_directory: = @('app.web_directory') ~ '/sites/default/files'
  drupal:
    salt: 2tkqCCRKy5rT4wMVz8KTCh8r3sJGkL5v
    docroot: docroot
    major_version: '9'
  nginx:
    php_fpm:
      conf:
        fastcgi_buffers: 1024 4k
        fastcgi_buffer_size: 32k
  database:
    user: drupal
    pass: drupal
    name: drupal
  backend:
    build:
      steps:
        - task composer:install
    install:
      steps:
        - |
          passthru drush site:install standard \
              --locale=en \
              --site-name=Drupal \
              "--site-mail=${ADMIN_EMAIL}" \
              \
              "--account-name=${ADMIN_USERNAME}" \
              "--account-mail=${ADMIN_EMAIL}" \
              "--account-pass=${ADMIN_DEFAULT_PASSWORD}" \
              --yes
        - run chmod 755 /app/docroot/sites/default
        - task overlay:apply
        - task assets:dump
    migrate:
      steps:
        - run drush cache:rebuild
        - passthru drush updatedb --yes
        - run drush cache:rebuild
    cron:
      jobs:
        - = '*/5 * * * * /cron-run-with-env.sh /app/bin/drush --root="/app/' ~ @('drupal.docroot') ~ '" cron'
  php:
    install_extensions:
      - "= @('services.blackfire.enabled') ? 'blackfire' : ''"
      - "= @('services.tideways.enabled') ? 'tideways' : ''"
      - memcached
      - redis
    cli:
      ini:
        opcache.file_cache_only: '0'
    version: "= version_compare(@('drupal.major_version'), '10', '>=') ? '8.1' : (version_compare(@('drupal.major_version'), '9', '>=') ? '8.0' : '7.4')"
  persistence:
    enabled: false
    drupal:
      files:
        claimName: drupal-files-pvc
        mountPath: = @('app.files_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 1Gi
---
command('drush %'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    passthru ws exec drush --root=/app/={ @('drupal.docroot') } ={ input.argument('%') }
---
command('test-unit'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|=
    $COMPOSE_BIN exec -T -u root php-fpm bash -c 'mkdir -p /app/docroot/sites/simpletest'
    $COMPOSE_BIN exec -T -u root php-fpm bash -c 'chown -R www-data:www-data /app/docroot/sites/simpletest'
    if ! $COMPOSE_BIN exec -T -u root php-fpm bash -c '[ -f /app/bin/phpunit ]'; then
      if [[ "$($COMPOSE_BIN version --short)" =~ ^1\. ]]; then
        run "docker cp ${COMPOSE_PROJECT_NAME}_console_1:/app/bin - | docker cp - ${COMPOSE_PROJECT_NAME}_php-fpm_1:/app/"
        run "docker cp ${COMPOSE_PROJECT_NAME}_console_1:/app/vendor - | docker cp - ${COMPOSE_PROJECT_NAME}_php-fpm_1:/app/"
      else
        run "$COMPOSE_BIN cp console:/app/bin - | $COMPOSE_BIN cp - php-fpm:/app/"
        run "$COMPOSE_BIN cp console:/app/vendor - | $COMPOSE_BIN cp - php-fpm:/app/"
      fi
    fi
    passthru $COMPOSE_BIN exec -T -u www-data php-fpm bash -c 'bin/phpunit'
---
import:
  - harness/config/*.yml
  - harness/attributes/*.yml
  - harness/attributes/environment/={env('MY127WS_ENV','local')}.yml
