---
harness('inviqa/spryker'):
  description: A docker based development environment for Spryker
  require:
    services:
      - proxy
      - mail
    confd:
      - harness:/
---
attributes:
  app:
    web_owner: www-data
    web_group: www-data
    web_writable_dirs:
      - '/app/data'
    services:
      - chrome
      - postgres
      - redis
      - elasticsearch
      - rabbitmq
      - jenkins
      - jenkins-runner
    data_directory: /app/data
  spryker:
    salt: 2tkqCCRKy5rT4wMVz8KTCh8r3sJGkL5v
    demoshop-url: https://github.com/spryker-shop/b2c-demo-shop.git
    demoshop-version: "202009.0"
    mode: development
    oauth_client_secret: ~
    zed_request_token: ~
  php:
    composer:
      major_version: 1
    fpm:
      ini:
        max_execution_time: 600
    version: 7.4
    ini:
      opcache.max_accelerated_files: 65407
      opcache.memory_consumption: 512
  database:
    platform: postgres
    host: postgres
    user: spryker
    pass: spryker
    name: spryker
  backend:
    build:
      when: 'true'
      steps:
        - task spryker:build
    install:
      steps:
        - task rabbitmq:vhosts
        - "= @('services.jenkins.enabled') ? 'task http:wait $JENKINS_URL' : ''"
        - task spryker:install
        - task overlay:apply
    init:
      steps:
        - "= @('services.jenkins.enabled') ? 'task http:wait $JENKINS_URL' : ''"
        - task rabbitmq:vhosts
        - task spryker:init
    migrate:
      steps:
        - task spryker:migrate
  frontend:
    yves:
      watch: npm run yves:watch
    zed:
      watch: npm run zed:watch
    build:
      when: -f "package.json"
      steps:
        - run vendor/bin/install -r docker -s frontend
        - |
          if [ "$APP_BUILD" == "static" ]; then
            run "rm -rf node_modules/ vendor/*/*/assets/Zed/node_modules"
            run npm cache clean --force
          fi
  docker:
    image:
      console: "= 'my127/spryker:' ~ @('php.version') ~ '-fpm-' ~ (@('php.version') >= 7.4 ? 'buster' : 'stretch') ~ '-console'"
      php-fpm: "= 'my127/spryker:' ~ @('php.version') ~ '-fpm-' ~ (@('php.version') >= 7.4 ? 'buster' : 'stretch')"
  elasticsearch:
    image: elasticsearch
    tag: 6.8.12
  hostname_aliases: "= replace(flatten([
      @('glue.external_hosts'),
      @('yves.external_hosts'),
      @('zed.external_hosts'),
      @('zed_api.external_hosts')
    ]), '.' ~ @('domain'), '')"
  lighthouse:
    target:
      url: = 'https://' ~ @('yves.external_hosts.DE')
  redis:
    protocol: redis
  rabbitmq:
    user: spryker
    password: spryker
    vhosts:
      default: 'de-spryker'
      DE: = 'de-spryker'
      AT: = 'at-spryker'
      US: = 'us-spryker'
  jenkins:
    host: jenkins
    port: 8080
    external_host: = 'jenkins-' ~ @('hostname')
  yves:
    external_hosts:
      DE: = 'yves-de-' ~ @('hostname')
      AT: = 'yves-at-' ~ @('hostname')
      US: = 'yves-us-' ~ @('hostname')
  zed:
    external_hosts:
      DE: = 'zed-de-' ~ @('hostname')
      AT: = 'zed-at-' ~ @('hostname')
      US: = 'zed-us-' ~ @('hostname')
  zed_api:
    external_hosts:
      DE: = 'zed-api-de-' ~ @('hostname')
      AT: = 'zed-api-at-' ~ @('hostname')
      US: = 'zed-api-us-' ~ @('hostname')
  glue:
    external_hosts:
      DE: = 'glue-de-' ~ @('hostname')
      AT: = 'glue-at-' ~ @('hostname')
      US: = 'glue-us-' ~ @('hostname')
  nginx:
    global:
      conf:
        server_names_hash_bucket_size: 128
  pipeline:
    preview:
      yves:
        external_hosts:
          DE: = 'yves-de-' ~ @('pipeline.preview.hostname')
          AT: = 'yves-at-' ~ @('pipeline.preview.hostname')
          US: = 'yves-us-' ~ @('pipeline.preview.hostname')
      zed:
        external_hosts:
          DE: = 'zed-de-' ~ @('pipeline.preview.hostname')
          AT: = 'zed-at-' ~ @('pipeline.preview.hostname')
          US: = 'zed-us-' ~ @('pipeline.preview.hostname')
      zed_api:
        external_hosts:
          DE: = 'zed-api-de-' ~ @('pipeline.preview.hostname')
          AT: = 'zed-api-at-' ~ @('pipeline.preview.hostname')
          US: = 'zed-api-us-' ~ @('pipeline.preview.hostname')
      glue:
        external_hosts:
          DE: = 'glue-de-' ~ @('pipeline.preview.hostname')
          AT: = 'glue-at-' ~ @('pipeline.preview.hostname')
          US: = 'glue-us-' ~ @('pipeline.preview.hostname')
      jenkins:
        external_host: = 'jenkins-' ~ @('pipeline.preview.hostname')
      smtp:
        host: mailhog.kube-system.svc.cluster.local
      resourcePrefix: ~
    qa:
      yves:
        external_hosts:
          DE: = 'yves-de-' ~ @('pipeline.qa.hostname')
          AT: = 'yves-at-' ~ @('pipeline.qa.hostname')
          US: = 'yves-us-' ~ @('pipeline.qa.hostname')
      zed:
        external_hosts:
          DE: = 'zed-de-' ~ @('pipeline.qa.hostname')
          AT: = 'zed-at-' ~ @('pipeline.qa.hostname')
          US: = 'zed-us-' ~ @('pipeline.qa.hostname')
      zed_api:
        external_hosts:
          DE: = 'zed-api-de-' ~ @('pipeline.qa.hostname')
          AT: = 'zed-api-at-' ~ @('pipeline.qa.hostname')
          US: = 'zed-api-us-' ~ @('pipeline.qa.hostname')
      glue:
        external_hosts:
          DE: = 'glue-de-' ~ @('pipeline.qa.hostname')
          AT: = 'glue-at-' ~ @('pipeline.qa.hostname')
          US: = 'glue-us-' ~ @('pipeline.qa.hostname')
      jenkins:
        external_host: = 'jenkins-' ~ @('pipeline.qa.hostname')
      smtp:
        host: mailhog.kube-system.svc.cluster.local

  helm:
    timeout: 900

  php-fpm:
    pools:
      www:
        port: 9000
      zed:
        port: 9001

  persistence:
    enabled: false
    spryker:
      data:
        claimName: spryker-data-pvc
        mountPath: = @('app.data_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 1Gi
    redis:
      enabled: true
    jenkins:
      enabled: true
      accessMode: ReadWriteOnce
      size: 2Gi

---
command('frontend yves watch'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    # Use `bash -i` to load up /home/build/.bashrc, which sets up node version manager (nvm) paths
    passthru docker-compose exec -u build --workdir '@('frontend.path')' console bash -i -c '@('frontend.yves.watch')'
command('frontend zed watch'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(workspace:/)|@
    # Use `bash -i` to load up /home/build/.bashrc, which sets up node version manager (nvm) paths
    passthru docker-compose exec -u build --workdir '@('frontend.path')' console bash -i -c '@('frontend.zed.watch')'
---
import:
  - harness/config/*.yml
  - harness/attributes/*.yml
  - harness/attributes/environment/={env('MY127WS_ENV','local')}.yml
