---
harness('inviqa/magento2'):
  description: A docker based development environment for magento2
  require:
    services:
      - proxy
      - mail
    confd:
      - harness:/
    attributes:
      standard:
        - magento.edition
      secret:
        - magento.username
        - magento.password
---
attributes:
  app:
    web_owner: www-data
    web_group: www-data
    web_writable_dirs:
      - '/app/pub/media'
      - '/app/pub/static'
      - '/app/var'
      - '/app/var/export'
      - '/app/pub/static/frontend'
      - "= (@('app.mode') !== 'production' ? '/app/generated' : '')"
    services:
      - chrome
      - cron
      - mysql
      - redis
      - redis-session
      - elasticsearch
    web_directory: /app/pub
    export_directory: /app/var/export
    media_directory: = @('app.web_directory') ~ '/media'
  php:
    composer:
      major_version: "= version_compare(@('magento.version'), '2.4.2', '>=') ? 2 : 1"
    fpm:
      ini:
        max_execution_time: 18000
    ini:
      opcache.interned_strings_buffer: 64
      opcache.max_accelerated_files: 65407
      opcache.memory_consumption: 512
    install_extensions:
      - "= @('services.blackfire.enabled') ? 'blackfire' : ''"
      - "= @('services.tideways.enabled') ? 'tideways' : ''"
      - redis
      - sockets
    version: 7.4
  composer:
    auth:
      basic:
        magento:
          path: repo.magento.com
          username: = @('magento.username')
          password: = @('magento.password')
  database:
    user: magento
    pass: magento
    name: magento
  magento:
    edition: enterprise
    config:
      session:
        save: redis
    crypt:
      key: WmpzgYLfW8jwxTRKbACKqudJXcjJ4jqu
    run:
      code: []
      type: []
    static_content:
      adminhtml:
        languages: []
        themes: []
      frontend:
        languages: []
        themes: []
    version: 2.4.2
  backend:
    build:
      steps:
        - task composer:install
        - task magento:tidy
        - |
          if [ "$APP_BUILD" == "static" ] ; then
            run mv app/etc/env.php app/etc/env-backup.php
            run composer dump-autoload --optimize
            passthru bin/magento setup:di:compile
            run mv app/etc/env-backup.php app/etc/env.php
            task composer:autoload
          fi
        - |
          if [ "$APP_BUILD" == "static" ] && validate-magento-config ; then
            task magento:static_content_deploy
          else
            echo -n "$(date +%s)" > pub/static/deployed_version.txt
          fi
        - run mkdir -p /app/var/export
    install:
      steps:
        # the magento installer will not work if the dpeloyment config is present so we remove and
        # restore it after installation.
        - run rm -f /app/app/etc/env.php
        - run rm -f /app/app/etc/config.php
        - run rm -rf /tmp/php-file-cache/*/app/app/etc/ || true
        - |
          if [[ "$HAS_ELASTICSEARCH" == "true" ]]; then
            task http:wait "${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"
          fi
        - |
          passthru "magento setup:install \
            --key='${MAGENTO_CRYPT_KEY}' \
            \
            --backend-frontname=admin \
            --base-url='https://${APP_HOST}/' \
            \
            --admin-user=admin \
            --admin-password=admin123 \
            --admin-email=admin@localhost.local \
            --admin-firstname=First \
            --admin-lastname=Last \
            \
            --db-host='${DB_HOST}' \
            --db-name='${DB_NAME}' \
            --db-user='${DB_USER}' \
            --db-password='${DB_PASS}' \
            \
            --session-save=redis \
            --session-save-redis-host='${REDIS_SESSION_HOST}' \
            --session-save-redis-port='${REDIS_SESSION_PORT}' \
            --session-save-redis-db=1 \
            \
            --cache-backend=redis \
            --cache-backend-redis-server='${REDIS_HOST}' \
            --cache-backend-redis-port='${REDIS_PORT}' \
            --cache-backend-redis-db=2 \
            \
            --page-cache=redis \
            --page-cache-redis-server='${REDIS_HOST}' \
            --page-cache-redis-port='${REDIS_PORT}' \
            --page-cache-redis-db=3 \
            \
            --search-engine=elasticsearch7 \
            --elasticsearch-host='${ELASTICSEARCH_HOST}' \
            --elasticsearch-port='${ELASTICSEARCH_PORT}' \
            \
            --language=en_GB"
          # magento doesn't respond with an exit code when it fails so we check
          # if the install succeeded or not here.
          if [ ! -f /app/app/etc/env.php ]; then
            (>&2 cat /tmp/my127ws-stdout.txt)
            (>&2 cat /tmp/my127ws-stderr.txt)
            exit 1
          fi
        - run rm -f /app/app/etc/env.php
        - task overlay:apply
        - task magento:dump-config
        - run rm -rf /tmp/php-file-cache/*/app/app/etc/ || true
        - task assets:dump
    init:
      steps:
        - |
          if [[ -f app/etc/env-backup.php ]]; then
            run mv app/etc/env-backup.php app/etc/env.php
          fi
        - task rabbitmq:vhosts
        - |
          if [[ "$HAS_ELASTICSEARCH" == "true" ]]; then
            task http:wait "${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"
          fi
        - run magento setup:upgrade --keep-generated --no-interaction
        - run magento config:set 'web/unsecure/base_url'       "https://${APP_HOST}/"
        - run magento config:set 'web/secure/base_url'         "https://${APP_HOST}/"
        - run magento config:set 'web/secure/use_in_frontend'  1
        - run magento config:set 'web/secure/use_in_adminhtml' 1
        - run magento config:set 'web/seo/use_rewrites'        1
        - if [[ "$HAS_VARNISH" == "true" ]]; then
            run magento config:set 'system/full_page_cache/caching_application' 2;
          fi
    migrate:
      steps:
        - |
          if [[ "$HAS_ELASTICSEARCH" == "true" ]]; then
            task http:wait "${ELASTICSEARCH_HOST}:${ELASTICSEARCH_PORT}"
          fi
        - run magento setup:upgrade --keep-generated
        - run magento cache:clean
    cron:
      jobs:
        - "= (@('app.mode') == 'production' ? '* * * * * /cron-run-with-env.sh \"/app/bin/magento cron:run & wait\"' : '')"
  framework:
    readme_blocks:
      - xml_urn_generation
  rabbitmq:
    vhosts:
      default: 'magento'
  persistence:
    enabled: false
    magento:
      export:
        claimName: magento-export-pvc
        mountPath: = @('app.export_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 512Mi
      media:
        claimName: magento-media-pvc
        mountPath: = @('app.media_directory')
        accessMode: ReadWriteMany # the requirement if persistence is enabled
        #storageClass: "..." most clusters need a custom storageclass
        #hostPath: "..." alternatively for single node testing
        size: 1Gi
  nginx:
    # Magento has a complex webroot structure
    copy_directories:
      - = @('app.web_directory')
      # additional endpoints we don't need by default
      #- /app/setup/pub
      #- /app/update/pub
    php_fpm:
      conf:
        fastcgi_buffer_size: 128k
        # fastcgi_buffer_size (128k) + fastcgi_buffers's size (16k)
        fastcgi_busy_buffers_size: 144k

---
command('redis-flush'): |
  #!bash
  ws redis flush

command('redis flush'):
  env:
    COMPOSE_PROJECT_NAME: = @('namespace')
  exec: |
    #!bash(harness:/)|@
    docker-compose exec redis redis-cli flushall

command('magento %'):
  exec: |
    #!bash(workspace:/)|=
    passthru ws exec bin/magento ={input.argument('%')}
---
import:
  - harness/config/*.yml
  - harness/attributes/*.yml
  - harness/attributes/environment/={env('MY127WS_ENV','local')}.yml
