function('to_yaml', [data]): |
  #!php
  $yaml = \Symfony\Component\Yaml\Yaml::dump($data, 100, 2));
  if (is_array($data) && count($data) > 0) {
    $yaml = "\n" . rtrim(preg_replace('/^/m', '  ', $yaml), "\n");
  }
  = $yaml;

function('to_nice_yaml', [data, indentation, nesting]): |
  #!php
  $yaml = \Symfony\Component\Yaml\Yaml::dump($data, 100, $indentation ?: 2);
  if (is_array($data) && count($data) > 0) {
    $yaml = "\n" . rtrim(preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), $yaml), "\n");
  }
  = $yaml;

function('indent', [text, indentation]): |
  #!php
  = preg_replace('/^/m', str_repeat(' ', $indentation ?: 2), $text);

function('deep_merge', [arrays]): |
  #!php
  // source https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_array_merge_deep_array/7.x
  $deepMerge = function ($arrays) use (&$deepMerge) {
    $result = array();
    foreach ($arrays as $array) {
        if ($array === null) { continue; }
        foreach ($array as $key => $value) {
            // Renumber integer keys as array_merge_recursive() does. Note that PHP
            // automatically converts array keys that are integer strings (e.g., '1')
            // to integers.
            if (is_integer($key)) {
                $result[] = $value;
            }
            elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
                $result[$key] = $deepMerge(array(
                    $result[$key],
                    $value,
                ));
            }
            else {
                $result[$key] = $value;
            }
        }
    }
    return $result;
  };
  = $deepMerge($arrays);

function('deep_merge_to_yaml', [arrays, indentation, nesting]): |
  #!php
  trigger_error('deep_merge_to_yaml is deprecated, please use separate deep_merge and to_nice_yaml functions', E_USER_DEPRECATED);
  // source https://api.drupal.org/api/drupal/includes%21bootstrap.inc/function/drupal_array_merge_deep_array/7.x
  $deepMerge = function ($arrays) use (&$deepMerge) {
    $result = array();
    foreach ($arrays as $array) {
        if ($array === null) { continue; }
        foreach ($array as $key => $value) {
            // Renumber integer keys as array_merge_recursive() does. Note that PHP
            // automatically converts array keys that are integer strings (e.g., '1')
            // to integers.
            if (is_integer($key)) {
                $result[] = $value;
            }
            elseif (isset($result[$key]) && is_array($result[$key]) && is_array($value)) {
                $result[$key] = $deepMerge(array(
                    $result[$key],
                    $value,
                ));
            }
            else {
                $result[$key] = $value;
            }
        }
    }
    return $result;
  };
  $text = $deepMerge($arrays);
  = preg_replace('/^/m', str_repeat(' ', $nesting ?: 2), \Symfony\Component\Yaml\Yaml::dump($text, 100, $indentation ?: 2));

function('filter_local_services', [services]): |
  #!php
  $filteredServices = [];
  foreach ($services as $serviceName => $service) {
    $filteredService = [];
    foreach ($service as $key => $value) {
      switch ($key) {
        case 'environment':
        case 'enabled':
          $filteredService[$key] = $value;
      }
    }
    if (count($filteredService) > 0) {
      $filteredServices[$serviceName] = $filteredService;
    }
  }
  = $filteredServices;

function('get_docker_external_networks'): |
  #!php
  $configRaw = shell_exec('docker-compose config');
  $config = \Symfony\Component\Yaml\Yaml::parse($configRaw);
  $externalNetworks = [];
  if (isset($config['networks'])) {
    foreach ($config['networks'] as $network) {
      if (isset($network['external'])) {
        if (is_array($network['external'])) {
          $externalNetworks[] = $network['external']['name'];
        } else if ($network['external'] === true) {
          $externalNetworks[] = $network['name'];
        }
      }
    }
  }
  = join(" ", $externalNetworks);

function('get_docker_registry', [dockerRepository]): |
  #!php
  $dockerRepoParts = explode('/', $dockerRepository);
  if (strpos($dockerRepoParts[0], '.') !== false) {
      $registry = $dockerRepoParts[0];
  }
  = $registry ?? 'https://index.docker.io/v1/';

function('docker_config', [attrConfig]): |
  #!php
  $config = [
    'auths' => [
      $attrConfig['registry_url'] => [
        'auth' => base64_encode($attrConfig['username'].':'.$attrConfig['password'])
      ]
    ]
  ];
  
  = json_encode($config);

function('branch'): |
  #!bash(workspace:/)
  =$(git branch | grep \* | cut -d ' ' -f2)

function('slugify', [text]): |
  #!php
  $text = preg_replace('~[^\pL\d]+~u', '-', $text);
  $text = iconv('utf-8', 'us-ascii//TRANSLIT', $text);
  $text = preg_replace('~[^-\w]+~', '', $text);
  $text = trim($text, '-');
  $text = preg_replace('~-+~', '-', $text);
  $text = strtolower($text);
  = $text;

function('php_fpm_exporter_scrape_url', [hostname, pools]): |
  #!php
  $text = join(
      ',',
      array_map(
        function ($pool) use ($hostname) {
          return 'tcp://' . $hostname .':' . $pool['port'] . '/status';
        },
        $pools
      )
    );
  = $text;

function('publishable_services', [services]): |
  #!php
  $pushServices = array_map(
    function ($serviceName, $service) {
      return ($service['publish'] ?? false) ? $serviceName : null;
    },
    array_keys($services),
    $services
  );
  = join(' ', array_filter($pushServices));

function('version_compare', [version1, version2, operator]): |
  #!php
  $count1 = substr_count($version1, '.');
  $count2 = substr_count($version2, '.');
  $version1 .= str_repeat('.0', max(0, $count2 - $count1));
  $version2 .= str_repeat('.0', max(0, $count1 - $count2));
  = version_compare($version1, $version2, $operator);
