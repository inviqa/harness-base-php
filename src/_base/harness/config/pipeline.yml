
command('app build'):
  env:
    HAS_CRON: "= ('cron' in @('app.services') ? 'true' : 'false')"
    HAS_VARNISH: "= ('varnish' in @('app.services') ? 'true' : 'false')"
  exec: |
    #!bash(workspace:/)|@
    ws app build console
    ws app build php-fpm
    ws app build nginx
    if [[ "${HAS_CRON}" == "true" ]]; then
      ws app build cron
    fi
    if [[ "${HAS_VARNISH}" == "true" ]]; then
      ws app build tls-offload
    fi

command('app build console'): |
  #!bash(workspace:/)|@
  passthru docker build --pull -t @('docker.repository'):@('app.version')-console -f .my127ws/docker/image/console/Dockerfile .

command('app build cron'): |
  #!bash(workspace:/)|@
  passthru docker build -t @('docker.repository'):@('app.version')-cron -f .my127ws/docker/image/cron/Dockerfile .

command('app build php-fpm'): |
  #!bash(harness:/docker/image/php-fpm)|@
  passthru docker build -t @('docker.repository'):@('app.version')-php-fpm .

command('app build nginx'): |
  #!bash(harness:/docker/image/nginx)|@
  passthru docker build -t @('docker.repository'):@('app.version')-nginx .

command('app build tls-offload'): |
  #!bash(harness:/docker/image/tls-offload)|@
  passthru docker build -t @('docker.repository'):@('app.version')-tls-offload .

command('app publish'):
  env:
    HAS_CRON: "= ('cron' in @('app.services') ? 'true' : 'false')"
  exec: |
    #!bash(workspace:/)|@
    echo "@('docker.password')" | run docker login --username="@('docker.username')" --password-stdin @('docker.repository')
    run docker push @('docker.repository'):@('app.version')-console
    run docker push @('docker.repository'):@('app.version')-php-fpm
    run docker push @('docker.repository'):@('app.version')-nginx
    if [[ "${HAS_CRON}" == "true" ]]; then
      run docker push @('docker.repository'):@('app.version')-cron
    fi
    run docker logout @('docker.repository')

command('app publish chart <release> <message>'):
  env:
    SSH_KEY:    = @('pipeline.publish.chart.git.key')
    REPOSITORY: = @('pipeline.publish.chart.git.repository')
    ARTIFACTS:  = "./build-artifacts-repository/" ~ @('pipeline.publish.chart.git.path') ~ "/" ~ input.argument('release')
    MESSAGE:    = input.argument('message')
    USER_EMAIL: = @('pipeline.publish.chart.git.email')
  exec: |
    #!bash(workspace:/)|@

    run rm -rf build-artifacts-repository
    echo "${SSH_KEY}" | base64 -d > id_rsa
    chmod 0600 id_rsa

    export GIT_SSH_COMMAND='ssh -i ./id_rsa -o "IdentitiesOnly yes" -F /dev/null -o StrictHostKeyChecking=no'

    run git clone $REPOSITORY ./build-artifacts-repository
    run git -C ./build-artifacts-repository config user.email \"${USER_EMAIL}\"

    run mkdir -p $ARTIFACTS
    run rsync --exclude='*.twig' --exclude='_twig' --delete -a .my127ws/helm/app/ ${ARTIFACTS}/

    export GIT_SSH_COMMAND='ssh -i ../id_rsa -o "IdentitiesOnly yes" -F /dev/null -o StrictHostKeyChecking=no'
    run git -C ./build-artifacts-repository add .
    run git -C ./build-artifacts-repository commit --allow-empty -m \"${MESSAGE}\"
    run git -C ./build-artifacts-repository push origin master

command('app deploy <environment>'):
  env:
    ENVIRONMENT: = input.argument('environment')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    CLUSTER:     = @('pipeline.' ~ input.argument('environment') ~ '.cluster.name')
    TIMEOUT:     = @('helm.timeout')
  exec: |
    #!bash(harness:/helm)|=
    cd "${ENVIRONMENT}"
    doctl -t $DO_ACCESS_TOKEN kubernetes cluster kubeconfig show $CLUSTER > kubectl.config.yaml
    passthru helm init --client-only
    passthru helm dependency build
    passthru helm --kubeconfig=$PWD/kubectl.config.yaml upgrade --wait --atomic --install --timeout "${TIMEOUT}" --namespace "${NAMESPACE}" "${NAMESPACE}" ./

command('helm template <chart-path>'):
  env:
    CHART_PATH:  = input.argument('chart-path')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
  exec: |
    #!bash(harness:/helm)|=
    cd "${CHART_PATH}"
    passthru helm init --client-only
    passthru helm dependency build
    passthru helm template .

command('helm kubeval <chart-path>'):
  env:
    CHART_PATH: = input.argument('chart-path')
    NAMESPACE: = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
  exec: |
    #!bash(harness:/helm)|=
    cd "${CHART_PATH}"
    passthru helm init --client-only
    passthru helm dependency build
    passthru helm plugin install https://github.com/instrumenta/helm-kubeval || true
    passthru helm kubeval .
