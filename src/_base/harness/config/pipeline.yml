
command('app build'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    HAS_CRON: "= @('services.cron.enabled') ? 'true' : 'false'"
    HAS_JENKINS_RUNNER: "= @('services.jenkins-runner.enabled') ? 'true' : 'false'"
    HAS_JOB_QUEUE_CONSUMER: "= @('services.job-queue-consumer.enabled') ? 'true' : 'false'"
    HAS_WEBAPP: "= @('services.webapp.enabled') ? 'true' : 'false'"
    HAS_SOLR: "= @('services.solr.enabled') ? 'true' : 'false'"
  exec: |
    #!bash(workspace:/)|@
    ws external-images pull

    # dependency ordered build
    passthru $COMPOSE_BIN build console
    if [[ "${HAS_WEBAPP}" == "true" ]] || [[ "${HAS_CRON}" == "true" ]] || [ "${HAS_JOB_QUEUE_CONSUMER}" == "true" ]; then
      passthru $COMPOSE_BIN build php-fpm
    fi
    if [[ "${HAS_WEBAPP}" == "true" ]]; then
      passthru $COMPOSE_BIN build nginx
    fi
    if [[ "${HAS_CRON}" == "true" ]]; then
      passthru $COMPOSE_BIN build cron
    fi
    if [[ "${HAS_JENKINS_RUNNER}" == "true" ]]; then
      passthru $COMPOSE_BIN build jenkins-runner
    fi
    if [[ "${HAS_JOB_QUEUE_CONSUMER}" == "true" ]]; then
      passthru $COMPOSE_BIN build job-queue-consumer
    fi
    if [[ "${HAS_SOLR}" == "true" ]]; then
      passthru $COMPOSE_BIN build solr
    fi

command('app build <service>'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    SERVICE:    = input.argument('service')
  exec: |
    #!bash(workspace:/)|@
    passthru $COMPOSE_BIN build "${SERVICE}"

command('app publish'):
  env:
    COMPOSE_BIN: = @('docker.compose.bin')
    COMPOSE_HTTP_TIMEOUT: 180
    DOCKER_CLIENT_TIMEOUT: 180
  exec: |
    #!bash(workspace:/)|@
    echo '@('docker.registry.password')' | run docker login --username='@('docker.registry.username')' --password-stdin '@('docker.registry.url')'
    passthru $COMPOSE_BIN push @('pipeline.publish.services')
    run docker logout '@('docker.registry.url')'

command('app publish chart <release> <message>'):
  env:
    SSH_PRIVATE_KEY:    = @('pipeline.publish.chart.git.ssh_private_key')
    REPOSITORY: = @('pipeline.publish.chart.git.repository')
    ARTIFACTS_PATH:  = "./build-artifacts-repository/" ~ @('pipeline.publish.chart.git.path') ~ "/" ~ input.argument('release')
    MESSAGE:    = input.argument('message')
    GIT_USER_NAME: = @('pipeline.publish.chart.git.user_name')
    GIT_USER_EMAIL: = @('pipeline.publish.chart.git.email')
  exec: |
    #!bash(workspace:/)|@

    run rm -rf build-artifacts-repository

    if [ -n "${SSH_PRIVATE_KEY:-}" ]; then
      WS_APP_PUBLISH_CHART_SSH_PRIVATE_KEY="$(pwd)/id_ssh"
      (umask 0077 && echo "${SSH_PRIVATE_KEY}" | base64 -d > "${WS_APP_PUBLISH_CHART_SSH_PRIVATE_KEY}")
    fi

    export GIT_SSH_COMMAND='ssh -i '"$(printf '%q' "$WS_APP_PUBLISH_CHART_SSH_PRIVATE_KEY")"' -o "IdentitiesOnly yes" -F /dev/null -o StrictHostKeyChecking=no'

    run git clone "$REPOSITORY" ./build-artifacts-repository
    run git -C ./build-artifacts-repository config user.name "${GIT_USER_NAME}"
    run git -C ./build-artifacts-repository config user.email "${GIT_USER_EMAIL}"

    run mkdir -p $ARTIFACTS_PATH
    run rsync --exclude='*.twig' --exclude='_twig' --delete -a .my127ws/helm/app/ "${ARTIFACTS_PATH}/"

    run git -C ./build-artifacts-repository add .
    run "git -C ./build-artifacts-repository commit --allow-empty -m '${MESSAGE}'"
    run git -C ./build-artifacts-repository push origin -u HEAD

command('app deploy <environment>'):
  env:
    ENVIRONMENT: = input.argument('environment')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    CLUSTER:     = @('pipeline.' ~ input.argument('environment') ~ '.cluster.name')
    TIMEOUT:     = @('helm.timeout')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${ENVIRONMENT}"
    (umask 0077 && doctl -t "$DO_ACCESS_TOKEN" kubernetes cluster kubeconfig show "$CLUSTER" > kubectl.config.yaml)
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    if helm version --short --client | grep '^v3' >/dev/null 2>&1; then
      kubectl --kubeconfig="${PWD}/kubectl.config.yaml" create ns "${NAMESPACE}" || true
    fi
    passthru helm dependency build
    passthru helm --kubeconfig="${PWD}/kubectl.config.yaml" upgrade --wait --atomic --install --timeout "${TIMEOUT}" --namespace "${NAMESPACE}" "${NAMESPACE}" ./

command('helm template <chart-path>'):
  env:
    CHART_PATH:  = input.argument('chart-path')
    K8S_VERSION: = @('helm.kubernetes_version')
    NAMESPACE:   = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build
    passthru helm template --kube-version "${K8S_VERSION}" .

command('helm kubeval [--cleanup] <chart-path>'):
  env:
    CHART_PATH: = input.argument('chart-path')
    K8S_VERSION: = @('helm.kubernetes_version')
    NAMESPACE: = @('pipeline.' ~ input.argument('environment') ~ '.namespace')
    ADDITIONAL_SCHEMA_LOCATIONS: = @('helm.additional_schema_locations')
    CLEANUP: "= input.option('cleanup') ? 1 : 0"
  exec: |
    #!bash(harness:/helm)|=
    set -o pipefail
    cd "${CHART_PATH}"
    if helm version --short --client | grep '^Client: v2' >/dev/null 2>&1; then
      passthru helm init --client-only
    fi
    passthru helm dependency build

    if readlink "${HELM_HOME:-$HOME}/.helm/plugins/helm-kubeval" | grep '/https-github.com-instrumenta-helm-kubeval$' >/dev/null; then
      passthru helm plugin remove kubeval
    fi

    passthru helm plugin install https://github.com/inviqa/helm-kubeval || true
    KUBEVAL_OPTS=(
      --kubernetes-version "${K8S_VERSION}"
      --schema-location https://raw.githubusercontent.com/yannh/kubernetes-json-schema/master
    )

    if [ -n "${ADDITIONAL_SCHEMA_LOCATIONS:-}" ]; then
      KUBEVAL_OPTS+=(--additional-schema-locations "${ADDITIONAL_SCHEMA_LOCATIONS}")
    fi

    passthru helm kubeval "${KUBEVAL_OPTS[@]}" .

    if [ "$CLEANUP" = "1" ]; then
      run rm -rf charts/ requirements.lock
    fi
