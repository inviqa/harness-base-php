attributes:
  services:
    php-base:
      environment:
        HOST_OS_FAMILY: = @('host.os')
        APP_NAME: = @('workspace.name')
        APP_HOST: = @('hostname')
        DB_PLATFORM: = @('database.platform')
        DB_PLATFORM_VERSION: = @('database.platform_version')
        DB_HOST: = @('database.host')
        DB_PORT: = @('database.port')
        DB_USER: = @('database.user')
        DB_NAME: = @('database.name')
        ELASTICSEARCH_HOST: = @('elasticsearch.host')
        ELASTICSEARCH_PORT: = @('elasticsearch.port')
        RABBITMQ_API_PORT: = @('rabbitmq.api_port')
        RABBITMQ_EXTERNAL_HOST: = @('rabbitmq.external_host')
        RABBITMQ_HOST: = @('rabbitmq.host')
        RABBITMQ_PORT: = @('rabbitmq.port')
        RABBITMQ_USER: = @('rabbitmq.user')
        RABBITMQ_VHOST: = @('rabbitmq.vhosts.default')
        REDIS_HOST: = @('redis.host')
        REDIS_PORT: = @('redis.port')
        REDIS_SESSION_HOST: = @('redis-session.host')
        REDIS_SESSION_PORT: = @('redis-session.port')
        SOLR_HOST: = @('services.solr.host')
        SOLR_PORT: = @('services.solr.port')
        SMTP_HOST: = @('smtp.host')
        SMTP_PORT: = @('smtp.port')
        PHP_IDE_CONFIG: "serverName=workspace"
        TIDEWAYS_HOST: tideways
        VARNISH_HOSTNAME_TEMPLATE: "varnish-%d.varnish-headless"
      environment_secrets:
        DB_PASS: = @('database.pass')
        RABBITMQ_PASSWORD: = @('rabbitmq.password')
        TIDEWAYS_APIKEY: ""
    nginx:
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-nginx'
      publish: true
      environment:
        FPM_HOST: php-fpm
      resources:
        memory: "100Mi"
    console:
      enabled: true
      extends:
        - php-base
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-console'
      publish: true
      build:
        environment: {}
      environment:
        DB_ADMIN_USER: root
        HAS_ELASTICSEARCH: "= @('services.elasticsearch.enabled') ? 'true' : 'false'"
        HAS_VARNISH: "= @('services.varnish.enabled') ? 'true' : 'false'"
      environment_secrets:
        DB_ADMIN_PASS: = @('database.root_pass')
        ADMIN_DEFAULT_PASSWORD: admin123
      resources:
        memory: "2048Mi"
        init_memory: "1024Mi"
        migrate_memory: "1024Mi"
    cron:
      extends:
        - php-base
      enabled: "= 'cron' in @('app.services')"
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-cron'
      publish: "= @('services.cron.enabled')"
      resources:
        memory: "1024Mi"
    php-fpm:
      extends:
        - php-base
      enabled: true
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-php-fpm'
      publish: true
      environment:
        AUTOSTART_PHP_FPM: "true"
      resources:
        memory: "1024Mi"
    php-fpm-exporter:
      image: hipages/php-fpm_exporter
      environment:
        PHP_FPM_SCRAPE_URI: = php_fpm_exporter_scrape_url('php-fpm', @('php-fpm.pools'))
      resources:
        memory: "100Mi"
    blackfire:
      enabled: "= 'blackfire' in @('app.services')"
      image: blackfire/blackfire:latest
      environment:
        BLACKFIRE_AGENT_TIMEOUT: 10
        BLACKFIRE_LOG_LEVEL: 1
      environment_secrets:
        BLACKFIRE_CLIENT_ID: ""
        BLACKFIRE_CLIENT_TOKEN: ""
        BLACKFIRE_SERVER_ID: ""
        BLACKFIRE_SERVER_TOKEN: ""
    elasticsearch:
      enabled: "= 'elasticsearch' in @('app.services')"
      image: = @('elasticsearch.image') ~ ':' ~ @('elasticsearch.tag')
      resources:
        memory: "1024Mi"
    lighthouse:
      enabled: true
      image: = 'quay.io/inviqa_images/lighthouse:' ~ @('services.lighthouse.tag')
      tag: "= host_architecture() == 'amd64' ? 'chrome' : 'chromium'"
    memcached:
      enabled: "= 'memcached' in @('app.services')"
      image: memcached:1-alpine
    mongodb:
      image: mongo:4.4
      environment:
        MONGO_INITDB_ROOT_USERNAME: admin
      environment_secrets:
        MONGO_INITDB_ROOT_PASSWORD: password
      resources:
        memory: "512Mi"
    mysql:
      enabled: "= 'mysql' in @('app.services')"
      image: = @('mysql.image') ~ ':' ~ @('mysql.tag')
      options: = @('database.var')
      environment:
        MYSQL_DATABASE: = @('database.name')
        MYSQL_USER: = @('database.user')
      environment_secrets:
        MYSQL_PASSWORD: = @('database.pass')
        MYSQL_ROOT_PASSWORD: = @('database.root_pass')
      resources:
        memory: "512Mi"
    postgres:
      enabled: "= 'postgres' in @('app.services')"
      image: postgres:9.6
      environment:
        POSTGRES_DB: = @('database.name')
        POSTGRES_USER: = @('database.user')
        PGDATA: /var/lib/postgresql/data/pgdata
      environment_secrets:
        POSTGRES_PASSWORD: = @('database.pass')
      resources:
        memory: "512Mi"
    rabbitmq:
      enabled: "= 'rabbitmq' in @('app.services')"
      image: = @('rabbitmq.image') ~ ':' ~ @('rabbitmq.tag')
      environment:
        RABBITMQ_DEFAULT_USER: = @('rabbitmq.user')
        RABBITMQ_DEFAULT_VHOST: = @('rabbitmq.vhosts.default')
      environment_secrets:
        RABBITMQ_DEFAULT_PASS: = @('rabbitmq.password')
        RABBITMQ_ERLANG_COOKIE: = @('rabbitmq.erlang_cookie')
      resources:
        memory: "1024Mi"
    redis:
      enabled: "= 'redis' in @('app.services')"
      image: redis:5-alpine
      resources:
        memory: "256Mi"
    redis-session:
      enabled: "= 'redis-session' in @('app.services')"
      image: redis:5-alpine
      resources:
        memory: "1024Mi"
    relay:
      enabled: true
      publish: false
    solr:
      enabled: "= 'solr' in @('app.services')"
      publish: "= @('services.solr.enabled')"
      build:
        image: "= @('services.solr.major_version') != 4 ? 'solr:' ~ @('services.solr.major_version') ~ '-slim' : 'quay.io/inviqa_images/solr4:latest'"
      image: = @('docker.repository') ~ ':' ~ @('app.version') ~ '-solr'
      config_path: ""
      environment:
        SOLR_CORE_NAME: collection1
        SOLR_VOLUME_DIR: "=@('services.solr.major_version') == 4 ? '/opt/solr/example/solr' : (@('services.solr.major_version') < 8 ? '/opt/solr/server/solr/mycores' : '/var/solr')"
      environment_secrets: {}
      host: solr
      major_version: 8
      port: 8983
      resources:
        memory: "512Mi"
    tideways:
      enabled: "= 'tideways' in @('app.services')"
      image: quay.io/inviqa_images/tideways:latest
      environment:
        TIDEWAYS_HOSTNAME: = @('hostname')
        TIDEWAYS_ENV: production
      resources:
        memory: "256Mi"
    varnish:
      enabled: "= 'varnish' in @('app.services')"
      image: 'varnish:6.0'
      environment:
        VARNISH_SIZE: "1024M"
      resources:
        memory: "1124Mi"
    # webapp is by default two services combined, nginx and php-fpm
    webapp:
      enabled: true
  pipeline:
    base:
      global:
        affinity:
          selfAntiAffinityTopologyKey: ~
      prometheus:
        podMonitoring: false
      services:
        php-base:
          environment:
            APP_HOST: = @('pipeline.base.hostname')
            DB_HOST: = '{{ .Values.resourcePrefix }}' ~ @('database.host')
            ELASTICSEARCH_HOST: '{{ if .Values.services.elasticsearch.enabled }}{{ .Values.resourcePrefix  }}elasticsearch{{ end }}'
            ES_HOST: '{{ if .Values.services.elasticsearch.enabled }}{{ .Values.resourcePrefix }}elasticsearch:9200{{ end }}'
            RABBITMQ_HOST: '{{ if .Values.services.rabbitmq.enabled }}{{ .Values.resourcePrefix  }}rabbitmq{{ end }}'
            RABBITMQ_EXTERNAL_HOST: = @('pipeline.preview.rabbitmq.external_host')
            REDIS_HOST: '{{ if .Values.services.redis.enabled }}{{ .Values.resourcePrefix }}redis{{ end }}'
            REDIS_SESSION_HOST: '{{ if (index .Values.services "redis-session" "enabled") }}{{ .Values.resourcePrefix }}redis-session{{ end }}'
            SOLR_HOST: '{{ if (.Values.services.solr.enabled) }}{{ .Values.resourcePrefix }}solr{{ end }}'
            PHP_IDE_CONFIG: = ''
            TIDEWAYS_HOST: "{{ .Values.resourcePrefix  }}tideways"
            TIDEWAYS_ENABLED: "{{ .Values.services.tideways.enabled }}"
            VARNISH_HOSTNAME_TEMPLATE: "{{ .Values.resourcePrefix }}varnish-%d.{{ .Values.resourcePrefix }}varnish-headless"
        mysql:
          options: = @('services.mysql.options')
        console:
          environment:
            TIDEWAYS_ENABLED: "= @('php.ext-tideways.cli.enable') ? '{{ .Values.services.tideways.enabled }}' : 'false'"
        nginx:
          environment:
            FPM_HOST: localhost
          metricsEnabled: false
          metricsEndpoints:
            - port: http
        php-fpm-exporter:
          environment:
            PHP_FPM_SCRAPE_URI: = php_fpm_exporter_scrape_url('127.0.0.1', @('php-fpm.pools'))
          metricsEnabled: true
          metricsEndpoints:
            - port: php-fpm-metrics
        relay:
          enabled: false
        tideways:
          environment:
            TIDEWAYS_HOSTNAME: = @('pipeline.base.hostname')
      ingress:
        annotations: {}
        target_service: "= @('services.varnish.enabled') ? 'varnish' : 'webapp'"
        # standard or istio
        type: standard
      istio:
        gateways:
          - "istio-system/{{ .Release.Namespace }}-gateway"
        additionalGateways: []
    production:
      # assumption is that in a production style environment these would be
      # managed services outside of the applications control
      services:
        elasticsearch:
          enabled: false
        memcached:
          enabled: false
        mysql:
          enabled: false
        postgres:
          enabled: false
        redis:
          enabled: false
        redis-session:
          enabled: false
    qa:
      services:
        php-base:
          environment:
            APP_HOST: = @('pipeline.qa.hostname')
            RABBITMQ_EXTERNAL_HOST: = @('pipeline.qa.rabbitmq.external_host')
            SMTP_HOST: = @('pipeline.qa.smtp.host')
            SMTP_PORT: = @('pipeline.qa.smtp.port')
        tideways:
          environment:
            TIDEWAYS_HOSTNAME: = @('pipeline.qa.hostname')
    preview:
      services:
        console:
          enabled: false
          resources:
            memory: "1024Mi"
        nginx:
          resources:
            memory: "64Mi"
        php-base:
          environment:
            SMTP_HOST: = @('pipeline.preview.smtp.host')
            SMTP_PORT: = @('pipeline.preview.smtp.port')
        php-fpm-exporter:
          resources:
            memory: "32Mi"
        redis:
          resources:
            memory: "64Mi"
        redis-session:
          resources:
            memory: "64Mi"
