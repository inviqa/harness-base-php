{% set blocks = 'application/skeleton/_twig/README.md/' %}
# {{ @('workspace.name') }}

Please follow the below steps to get started, if you encounter any issues installing the dependencies or provisioning the development environment, please check the [Common Issues](#common-issues) section first.

## Development Environment

### Getting Started

#### Prerequisites

##### General

- Access to LastPass folders
  - `Shared-{{ @('workspace.name') }}-Servers` and `Shared-{{ @('workspace.name') }}-Accounts`

##### Docker

- A working Docker setup
  - On MacOS, use [Docker for Mac](https://docs.docker.com/docker-for-mac/install/).
  - On Linux, add the official Docker repository and install the "docker-ce" package.
    You will also need to have a recent [docker-compose](https://docs.docker.com/compose/install/) version - at least `1.24.0`.

#### Setup

1. Install [workspace](https://github.com/my127/workspace)
2. Copy the LastPass entry "{{ @('workspace.name') }}: Development Environment Key" to a new blank file named `workspace.override.yml` in the project root.
3. Run `ws install`

Once installed, the site should be available at [https://{{ @('hostname') }}](https://{{ @('hostname') }}).

### Development environment cleanup

To stop the development environment, run `ws disable`.

To start the development environment again, run `ws enable`.

To remove the development environment, run `ws destroy`.

### Frontend

The frontend build should be automatically done as part of bringing up the environment.

To trigger a rebuild, run `ws frontend build`.

To watch for changes, run `ws frontend watch`.

To gain access to the `console` container where the builds happen: `ws frontend console`.

### Harness Version Updates

If you have been notified that a harness version upgrade is available by your team, do the following.

If you have an existing environment running:
```bash
ws harness update existing
```

or if you don't have one running right now or would like to set up from fresh:
```bash
ws harness update fresh
```

{% for readme_block in @('framework.readme_blocks') %}
{% include blocks ~ readme_block ~ '.md.twig' %}
{% endfor %}

{% if "mysql" in @('app.services') -%}
### MySQL Access

MySQL can be used either via command line tools via `ws db console` or via GUI tools.

In your GUI tool, set up a new connection to localhost with the port being the returned port number from:
```bash
ws port mysql
```

{% if @('database.port_forward') == "" -%}
This port will change each time the project environment is started, as docker will allocate a random unused port
on your host machine.

To set a consistent port for this project, choose a port number that you think will be unique across all projects
that your developers will encounter (e.g. not 3306!). Acceptable range of ports is 1-65535.

Once you have a port number, you can define it in the workspace.yml with:
```yaml
attribute('database.port_forward'): portNumberHere
```
{%- endif %}

The connection username and password is listed under the `mysql` service environment section in `docker-compose.yml` in
the project root.
{% endif %}

### Xdebug

Xdebug is turned off by default as it drastically slows down requests for all developers.

To enable, run `ws feature xdebug on`. To turn off again, `ws feature xdebug off`.

To enable on CLI in `ws console`, run `ws feature xdebug cli on`. To turn off again, `ws feature xdebug cli off`.

Xdebug is set up to listen to your computer's 9000 port once enabled, so all you would need to do in your IDE is:
1. Create a mapping from the project root to `/app` for name `workspace`, hostname `localhost` and port 80.
2. Depending on the IDE, you may have to configure the settings for the IDE to have idekey being `workspace`.
   Some IDEs also need to restart after changing this. Not required for PhpStorm.
3. Listen for connections.
4. If trying to debug a website, configure the IDE key of browser Xdebug extension such as one listed on
   [Browser Debugging Extensions](https://www.jetbrains.com/help/phpstorm/browser-debugging-extensions.html)
   to be `workspace`, toggle debug on, then refresh the page in the browser
5. If trying to debug a CLI application, re-run the CLI command. Some CLI programs like phpstan explicitly turn
   off Xdebug deliberately, but provide a `--xdebug` flag to allow running with Xdebug.

[Here's a good guide for PhpStorm](https://www.jetbrains.com/help/phpstorm/zero-configuration-debugging.html).

If you have trouble with triggered requests not starting connections to your IDE, check that
`sudo lsof -i :9000 | grep LISTEN` on your host shows process from your IDE.
If it doesn't, stop the indicated process (e.g. `php-fpm`) and toggle the Xdebug listen button off and on again in PhpStorm.

### Performance on macOS

Page load times with Docker for Mac can vary considerably due to the sharing of files from the macOS disk to the small
virtual machine that docker is running inside.
This is especially so when there is a large quantity of small files, such as with a large composer node_modules or
vendor folder.

[Mutagen](https://mutagen.io/documentation/transports/docker) and
[docker-sync](https://github.com/EugenMayer/docker-sync/) are tools to synchronise files between host machine and
docker containers.
They both enable production-like performance at the cost of having to synchronise files with an intermediate
"data" container.

{% if @('mutagen') == 'yes' %}
Mutagen is enabled on the development environment.
You can switch to docker-sync if you wish with `ws switch docker-sync`.
{% elseif @('docker-sync') == 'yes'  %}
docker-sync is enabled on the development environment.
You can switch to mutagen if you wish with `ws switch mutagen`.
{% else %}
If it takes over 2 seconds to load a page, you should consider enabling mutagen or docker-sync by adding the following
to `workspace.override.yml` in the project root, or after testing it and the whole team would like to use it,
`workspace.yml` in the project root:

```yaml
# for mutagen:
attribute('docker-sync'): 'no'
attribute('mutagen'): 'yes'
# or for docker-sync:
attribute('docker-sync'): 'yes'
attribute('mutagen'): 'no'
```

Then running `ws harness prepare && ws disable && ws enable`.
The initial sync can take between 5 to 15 minutes, depending on the size of the project directory.

If committing the attribute changes to `workspace.yml`, ensure the `Performance on macOS` section from
`.my127ws/application/skeleton/README.md` is copied to the project's README.md too!
{% endif %}

The following are some useful commands regarding Mutagen:
```bash
# To check the Mutagen sync status (sync is ready when status is "Watching for changes")
mutagen monitor
# To debug a sync error
mutagen list
```
{% if @('docker-sync') == 'yes'  %}

Useful commands for docker-sync:
```bash
# Check the logs
docker-sync logs -f
```
{% endif %}

### Common Issues

As setup issues are encountered please detail with step by step fix instructions, and where possible update the project or the upstream workspace harness itself to provide a more permanent fix.

* If you get a error that the TLS certificate has expired for the development website in your browser:
  * Restart the my127 global traefik proxy with `ws global service proxy restart`.
    This will fetch new TLS certificates for `*.my127.site`.
* If you use docker-sync and notice that your changes aren't synchronising to the environment:
  * Check if your file exists with your changes in `ws console`
  * If your file in `ws console` has changed okay, check your project for any caching that
    would prevent changes to source code appearing immediately.
  * If the file changes do not appear in `ws console` reasonably quickly, it might be that
    Docker for Mac is overwhelmed with file change events.
  * Restarting Docker for Mac using the system tray icon's menu and then running `ws enable` again
    will fix it.

# License

Copyright 2020, Inviqa

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
