pipeline {
    agent { label "my127ws" }
    environment {
        COMPOSE_DOCKER_CLI_BUILD = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        DOCKER_BUILDKIT = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        MY127WS_KEY = credentials('{{ @('jenkins.credentials.my127ws_key') }}')
        MY127WS_ENV = "pipeline"
    }
    triggers { cron(env.BRANCH_NAME == '{{ @('git.default_branch') }}' ? 'H H(0-6) * * *' : '') }
    stages {
{% if @('jenkins.tests.isolated') %}
        stage('Setup') {
            steps {
                sh 'ws harness download'
                sh 'ws harness prepare'
                sh 'ws enable console'
                milestone(10)
            }
        }
{% else %}
        stage('Build') {
            steps {
                sh 'ws install'
                milestone(10)
            }
        }
{% endif %}
        stage('Checks without development dependencies') {
            steps {
                sh 'ws exec composer test-production-quality'
                sh 'ws exec app composer:development_dependencies'
                milestone(20)
            }
        }
        stage('Test')  {
            parallel {
                stage('quality')    { steps { sh 'ws exec composer test-quality'    } }
                stage('unit')       { steps { sh 'ws exec composer test-unit'       } }
{% if not @('jenkins.tests.isolated') %}
                stage('acceptance') { steps { sh 'ws exec composer test-acceptance' } }
{% if @('services.lighthouse.enabled') %}
                stage('lighthouse') { steps { sh 'ws lighthouse' } }
{% endif %}
{% endif %}
                stage('helm kubeval qa')  { steps { sh 'ws helm kubeval --cleanup qa' } }
            }
        }
{% if @('jenkins.tests.isolated') %}
        stage('Build') {
            steps {
                sh 'ws enable'
                milestone(30)
            }
        }
        stage('End-to-end Test') {
            parallel {
                stage('acceptance') { steps { sh 'ws exec composer test-acceptance' } }
{% if @('services.lighthouse.enabled') %}
                stage('lighthouse') { steps { sh 'ws lighthouse' } }
{% endif %}
            }
        }
{% endif %}
{% if @('pipeline.publish.enabled') == 'yes' %}
        stage('Publish') {
{% if @('pipeline.publish.environment') %}
            environment {
{% for key, value in @('pipeline.publish.environment') %}
                {{ key }} = {{ value }}
{% endfor %}
            }
{% endif %}
            when {
                not { triggeredBy 'TimerTrigger' }
                anyOf {
{% for branch in @('pipeline.publish.branches') %}
                    branch '{{ branch }}'
{% endfor %}
{% if @('pipeline.qa.enabled') == 'yes' %}
                    branch '{{ @('pipeline.qa.branch') }}'
{% endif %}
{% if @('pipeline.preview.enabled') == 'yes' %}
{% for branch in @('pipeline.preview.target_branches') %}
                    changeRequest target: '{{ branch }}'
{% endfor %}
{% endif %}
                }
            }
            steps {
                milestone(50)
                sh 'ws app publish'
{% if @('pipeline.publish.chart.enabled') %}
                lock(resource: '{{ @('pipeline.publish.chart.git.repository') }}', inversePrecedence: true) {
                    sh 'ws app publish chart "${GIT_BRANCH}" "{{ @('workspace.name') }} build artifact ${GIT_COMMIT}"'
                }
{% endif %}
            }
        }
{% endif %}
{% if @('pipeline.qa.enabled') == 'yes' %}
        stage('Deploy (QA)') {
{% if @('pipeline.qa.environment') %}
            environment {
{% for key, value in @('pipeline.qa.environment') %}
                {{ key }} = {{ value }}
{% endfor %}
            }
{% endif %}
            when {
                not { triggeredBy 'TimerTrigger' }
                branch '{{ @('pipeline.qa.branch') }}'
            }
            steps {
                milestone(100)
                lock(resource: '{{ @('workspace.name') }}-qa-deploy', inversePrecedence: true) {
                    milestone(101)
                    sh 'ws app deploy qa'
                }
            }
        }
{% endif %}
    }
    post {
        always {
            sh 'ws destroy'
            cleanWs()
        }
    }
}
