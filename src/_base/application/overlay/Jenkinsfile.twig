def failureMessages = []
pipeline {
    agent { label 'linux-amd64' }
    environment {
        COMPOSE_DOCKER_CLI_BUILD = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        DOCKER_BUILDKIT = {{ @('jenkins.docker.buildkit.enabled') ? '1' : '0' }}
        MY127WS_KEY = credentials('{{ @('jenkins.credentials.my127ws_key') }}')
        MY127WS_ENV = "pipeline"
    }
    triggers { cron(env.BRANCH_NAME == '{{ @('git.default_branch') }}' ? 'H H(2-6) * * 1' : '') }
    stages {
{% if @('jenkins.tests.isolated') %}
        stage('Setup') {
            steps {
                sh 'ws harness download'
                sh 'ws harness prepare'
                sh 'ws enable console'
                milestone(10)
            }
            post { failure { script { failureMessages << 'Development environment console' } } }
        }
{% else %}
        stage('Build') {
            steps {
                sh 'ws install'
                milestone(10)
            }
            post { failure { script { failureMessages << 'Development environment install' } } }
        }
{% endif %}
        stage('Checks without development dependencies') {
            steps {
                sh 'ws exec composer test-production-quality'
                sh 'ws exec app composer:development_dependencies'
                milestone(20)
            }
            post { failure { script { failureMessages << 'Checks without development dependencies' } } }
        }
        stage('Test')  {
            parallel {
                stage('quality') {
                    steps { sh 'ws exec composer test-quality' }
                    post { failure { script { failureMessages << 'Quality checks' } } }
                }
                stage('unit') {
                    steps { sh 'ws exec composer test-unit' }
                    post { failure { script { failureMessages << 'Unit tests' } } }
                }
{% if not @('jenkins.tests.isolated') %}
                stage('acceptance') {
                    steps { sh 'ws exec composer test-acceptance' }
                    post { failure { script { failureMessages << 'Acceptance tests' } } }
                }
{% if @('services.lighthouse.enabled') %}
                stage('lighthouse') {
                    steps { sh 'ws lighthouse' }
                    post { failure { script { failureMessages << 'Lighthouse tests' } } }
                }
{% endif %}
{% endif %}
                stage('helm kubeval qa')  {
                    steps { sh 'ws helm kubeval --cleanup qa' }
                    post { failure { script { failureMessages << 'Helm chart rendering' } } }
                }
            }
        }
{% if @('jenkins.tests.isolated') %}
        stage('Build') {
            steps {
{% if @('jenkins.tests.use_global_services') %}
                sh 'ws install'
{% else %}
                sh 'ws enable'
{% endif %}
                milestone(30)
            }
            post { failure { script { failureMessages << 'Development environment full install' } } }
        }
        stage('End-to-end Test') {
            parallel {
                stage('acceptance') {
                    steps { sh 'ws exec composer test-acceptance' }
                    post { failure { script { failureMessages << 'Acceptance tests' } } }
                }
{% if @('services.lighthouse.enabled') %}
                stage('lighthouse') {
                    steps { sh 'ws lighthouse' }
                    post { failure { script { failureMessages << 'Lighthouse tests' } } }
                }
{% endif %}
            }
        }
{% endif %}
{% if bool(@('pipeline.publish.enabled')) %}
        stage('Publish') {
{% set env = @('pipeline.publish.environment') %}
{% set docker_registry_credential_id = @('docker.registry.credential_id') %}
{% set ssh_credential_id = @('pipeline.publish.chart.git.ssh_credential_id') %}
{% if env or docker_registry_credential_id or ssh_credential_id %}
            environment {
{% for key, value in env %}
                {{ key }} = {{ value }}
{% endfor %}
{% if docker_registry_credential_id %}
                DOCKER_REGISTRY_CREDS = credentials('{{ docker_registry_credential_id }}')
{% endif %}
{% if ssh_credential_id %}
                WS_APP_PUBLISH_CHART_SSH_PRIVATE_KEY = credentials('{{ ssh_credential_id }}')
{% endif %}
            }
{% endif %}
            when {
                not { triggeredBy 'TimerTrigger' }
                anyOf {
{% for branch in @('pipeline.publish.branches') %}
                    branch '{{ branch }}'
{% endfor %}
{% if bool(@('pipeline.qa.enabled')) %}
                    branch '{{ @('pipeline.qa.branch') }}'
{% endif %}
{% if bool(@('pipeline.preview.enabled')) %}
{% if @('pipeline.preview.pull_request_labels') %}
                    expression {
                        return env.CHANGE_ID && {{ @('pipeline.preview.pull_request_labels') | json_encode }}.any { pullRequest.labels.contains(it) }
                    }
{% endif %}
{% for branch in @('pipeline.preview.target_branches') | default([]) %}
                    changeRequest target: '{{ branch }}'
{% endfor %}
{% endif %}
                }
            }
            steps {
                milestone(50)
                sh 'ws app publish'
{% if bool(@('pipeline.publish.chart.enabled')) %}
                lock(resource: '{{ @('pipeline.publish.chart.git.repository') }}', inversePrecedence: true) {
                    sh 'ws app publish chart "${GIT_BRANCH}" "{{ @('workspace.name') }} build artifact ${GIT_COMMIT}"'
                }
{% endif %}
            }
            post { failure { script { failureMessages << 'Publish' } } }
        }
{% endif %}
{% if bool(@('pipeline.qa.enabled')) %}
        stage('Deploy (QA)') {
{% if @('pipeline.qa.environment') %}
            environment {
{% for key, value in @('pipeline.qa.environment') %}
                {{ key }} = {{ value }}
{% endfor %}
            }
{% endif %}
            when {
                not { triggeredBy 'TimerTrigger' }
                branch '{{ @('pipeline.qa.branch') }}'
            }
            steps {
                milestone(100)
                lock(resource: '{{ @('workspace.name') }}-qa-deploy', inversePrecedence: true) {
                    milestone(101)
                    sh 'ws app deploy qa'
                }
            }
            post { failure { script { failureMessages << 'Deploy QA' } } }
        }
{% endif %}
    }
    post {
{% if @('jenkins.notifications.slack.channel') and @('jenkins.notifications.slack.token_credential_id') %}
        failure {
            script {
                def message = "{% if bool(@('jenkins.notifications.global.full_build_name')) %}${env.JOB_NAME}{% else %}${env.JOB_BASE_NAME}{% endif %} #${env.BUILD_NUMBER} - Failure after ${currentBuild.durationString.minus(' and counting')} (<${env.RUN_DISPLAY_URL}|View Build>)"
                def fallbackMessages = [ message ]
                def fields = []

{% if @('jenkins.notifications.global.branch_link_template') and @('jenkins.notifications.global.commit_link_template') %}
                def shortCommitHash = "${GIT_COMMIT}".substring(0, 7)
                def commitLink = "commit <{{ @('jenkins.notifications.global.commit_link_template') }}".replace('GIT_COMMIT', GIT_COMMIT) + "|${shortCommitHash}>"
                def gitMessage = "Branch <{{ @('jenkins.notifications.global.branch_link_template') }}".replace('GIT_BRANCH', GIT_BRANCH) + "|${GIT_BRANCH}> at ${commitLink}"

                if (env.CHANGE_URL) {
                    // Jenkins builds pull requests by merging the pull request branch into the pull request's target branch,
                    // so we build on commits that do not technically exist and can't link to them.
                    gitMessage = "<${env.CHANGE_URL}|{{ @('jenkins.notifications.global.change_request_name') }} #${env.CHANGE_ID}> ${env.CHANGE_TITLE}{% if bool(@('jenkins.notifications.global.change_request_build_on_merge')) %} - merged into target branch " + "<{{ @('jenkins.notifications.global.branch_link_template') }}".replace('GIT_BRANCH', CHANGE_TARGET) + "|${CHANGE_TARGET}>{% endif %}"
                }
                fields << [
                    title: 'Source',
                    value: gitMessage,
                    short: false
                ]
                fallbackMessages << gitMessage
{% endif %}

                def failureMessage = failureMessages.join("\n")
                if (failureMessage) {
                    fields << [
                        title: 'Reason(s)',
                        value: failureMessage,
                        short: false
                    ]
                    fallbackMessages << failureMessage
                }
                def attachments = [
                    [
                        text: message,
                        fallback: fallbackMessages.join("\n"),
                        color: 'danger',
                        fields: fields
                    ]
                ]

                slackSend (channel: '{{ @('jenkins.notifications.slack.channel') }}', color: 'danger', attachments: attachments, tokenCredentialId: '{{ @('jenkins.notifications.slack.token_credential_id') }}')
            }
        }
{% endif %}
        always {
            sh 'ws destroy'
            cleanWs()
        }
    }
}
