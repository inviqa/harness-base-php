{{- with .Values.services.redis -}}
{{- if .enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Values.resourcePrefix }}redis
  annotations:
    argocd.argoproj.io/sync-wave: "4"
  labels:
    {{- include "chart.labels" $ | nindent 4 }}
    app.kubernetes.io/component: redis
    app.service: {{ $.Values.resourcePrefix }}redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app.service: {{ $.Values.resourcePrefix }}redis
{{- if $.Values.persistence.redis.enabled }}
  strategy:
    type: Recreate
{{- end }}
  template:
    metadata:
      creationTimestamp: null
      labels:
        {{- include "chart.selectors" $ | nindent 8 }}
        app.kubernetes.io/component: redis
        app.service: {{ $.Values.resourcePrefix }}redis
    spec:
      containers:
      - args:
        - redis-server
        - --maxmemory
        - "1073742000"
        - --maxmemory-policy
        - allkeys-lru
        - --save
        - "3600"
        - "1"
        - --save
        - "300"
        - "100"
        - --save
        - "60"
        - "10000"
        image: {{ .image | quote }}
        imagePullPolicy: Always
        name: redis
        ports:
        - containerPort: 6379
        resources:
          limits:
            memory: {{ .resources.memory }}
          requests:
            memory: {{ .resources.memory }}
        readinessProbe:
          tcpSocket:
            port: 6379
          initialDelaySeconds: 5
          periodSeconds: 10
        volumeMounts:
        - name: {{ $.Values.resourcePrefix }}redis-persistent-storage
          mountPath: /data
      restartPolicy: Always
      volumes:
      - name: {{ $.Values.resourcePrefix }}redis-persistent-storage
{{- if $.Values.persistence.redis.enabled }}
        persistentVolumeClaim:
          claimName: {{ $.Values.resourcePrefix }}redis-pv-claim
{{- else }}
        emptyDir: {}
{{- end }}
status: {}
{{- end }}
{{- end }}
